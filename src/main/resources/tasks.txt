
9. Protect REST (or check if it is needed)

11. Fix database - review constraints, associations, table names... (saying's author should be foreign key to User)

12. Maybe externalize sql queries? (ON HOLD)

13. Consider changing searching mechanism to utilize all search types without checking some radio button first.
For example like on facebook, when you type something it searches for names, locations, groups and more at the
same time.

16. Make admin page and permit it only for admins. For example configuration can be reloaded there without restarting the app

18. For post_cooldown.format.units=minutes,seconds, when there is < 1sec left, no time is displayed

19. Autocomplete search - implement that json call result is discarded and new call is initiated when result.searchTerm is different then 
data currently in the search box inserted by user (if needed at all, for now this seems to work pretty well)

20. Think about removing jquery autocomplete and making custom autocomplete more reusable and replacing jquery's ac

23. Make some kind of a CMS for the most important parts of the app, so it can be easily changed

25. Implement reputation for users

26. Implement likes for posts and comments

27. Implement comments

29. When app is restarted, saved session data from before is not loaded correctly and exception is thrown.
	
	java.lang.ClassCastException: cannot assign instance of java.lang.StackTraceElement to field java.util.Collections$UnmodifiableList.list of type java.util.List in instance of java.util.Collections$UnmodifiableList
	at java.io.ObjectStreamClass$FieldReflector.setObjFieldValues(ObjectStreamClass.java:2287)...
	
	...[org.apache.catalina.session.StandardManager] log:175 : Exception loading sessions from persistent storage
	
	It probably have to do with logged in user data, since this happens when server is restarted during user is logged in, and on the next start this exception is thrown.

30. Implement the logic to load application context dinamically (localhost/somethingElse) based on the dev or prod environment

31. Move repo to github, and make issues for all tasks

32. Create bigger set of mock data to populate database

33. Create a factory for choosing display strategy in: public SayingsDisplayStrategy getSayingsDisplayStrategy() {

35. In the log, this line is logged two times during application startup: [com.say.say.config.ApplicationProperties] init:44 : Application properties initialized!

36. Check if "private Set<Tag> loadTags(Set<String> tagNames) {" can be optimized with Redis

37. Add saying to the cache of all sayings of user when user creates a new post through UI

38. List<Saying> sayings = sayingDao.getSayingsFromUsername(username); - use Redis
==========================RESOLVED TASKS============================

2. Fix layout glitches

1. Implement search functionality
	
1.1. Search all sayings that have one of the specified tags
1.2. Search all sayings that have exactly specified tags
1.3. Search all sayings from specified author
1.4. Search all sayings by text
1.5. Implement FE for search, consider live search using jQuery autocomplete
1.6. Defining event listener inside success branch from json call don't work, fix it

4. Forbid empty sayings to be posted

5. Display cooldown time in some unit other then ms

17. (Duplicate of 15.) Search doesn't work:
public List<Integer> getSayingsContainingExactlyGivenTags(@Param(value="tagIds")String tagIds, @Param(value="tagCount") String tagCount)

15. Query getSayingsContainingExactlyGivenTags in SayingRepository don't work for searching one tag (tested with 33)

3. Tags can be removed

6. Make logging to a file

7. Set hibernate logging properly

8. Create users and authorization/authentication
	8.1. create basic authentication with spring security
	8.2. add DB authentication
	8.4. custom registration form
	8.5. (REQUIRED task 28.) create secure registration logic (activation link/code sent to email)
	8.5. connect sayings and users

8.3. custom login form

28. Create email sender

24. Make a template for displaying a saying (templates/sayingTemplate.html)

21. Move backend searching logic to some other controller. Currently it is implemented in test controller.

22. DBSearcher currently don't use third parameter List<SearchType>, find usage for it or discard it

34. Make saying posting cooldown logic using redis

14. Consider hot-reload


